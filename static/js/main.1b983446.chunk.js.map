{"version":3,"sources":["common/Spinner.js","utils/colorUtils.js","features/map/MapLegend.js","common/IconButton.js","common/Popup.js","features/map/Menu.js","utils/utils.js","utils/emission_model.js","utils/dataUtils.js","redux/widgetSettingsSlice.js","utils/dataHooks.js","features/map/Map.js","features/widgets/EmissionsModelChart.js","features/widgets/NumberInput.js","common/InfoPopup.js","common/Abbr.js","features/widgets/EmissionsModelDescription.js","features/widgets/SelectInput.js","features/widgets/EmissionsModelWidget.js","features/widgets/WidgetBox.js","features/widgets/Widgets.js","app/App.js","reportWebVitals.js","redux/store.js","index.js","common/Spinner.module.scss"],"names":["Spinner","isSmall","props","size","className","styles","spinner","data-testid","width","height","viewBox","xmlns","pathSmall","path","fill","strokeWidth","strokeLinecap","cx","cy","r","materialColors","dataColors","getBrewerColours","scaleName","num","chroma","scale","colors","MapLegend","mapColours","colourKeyName","colourKeyUnit","colourStops","valueStops","opacity","map","colour","index","value","nextValue","_","isNumber","col","alpha","toFixed","val","valueString","length","style","background","IconButton","Icon","onClick","role","onKeyDown","e","code","tabIndex","aria-pressed","Modal","setAppElement","Popup","title","modalIsOpen","setModalIsOpen","children","closeModal","isOpen","onAfterOpen","onRequestClose","overlayClassName","CloseIcon","MenuPopupContent","href","MenuIcon","stroke","strokeLinejoin","d","x1","y1","x2","y2","Menu","useState","menuIsOpen","setMenuIsOpen","m2ToHa","m2","tToMt","t","emission_model","A1","Cmax","s","args","x","Math","exp","emission_model_rd","emission_model_rnotd","loadLocationsData","a","type","dataUrl","process","console","log","fetch","then","res","json","data","loadSingleLocationData","locationID","calculateEmissionData","current_area_ha","deforestationRate","carbonStoredPerHectare","emissionsFactor","sequestrationRate","forecastYears","step","years","range","year","emissionModelSeriesReducer","seriesResults","forecastStartingYear","conversionRate","reduce","acc","results","seriesIndex","parsedResults","yearIndex","name","match","find","filename","Date","options","parseAsync","csv","blob","Blob","saveAs","initialState","emissionsChartYAxis","carbonPrice","seriesInputs","widgetSettingsSlice","createSlice","reducers","setForecastYears","state","action","payload","resetForecastYears","setEmissionsChartYAxis","includes","setCarbonPrice","inRange","createLocationSeriesInputs","inputParams","cloneDeep","set","updateLocationSeriesInputs","existingInputParams","addLocationSeriesInputs","push","removeLocationSeries","filter","item","i","actions","useEmissionModel","locationData","initialInputParams","setInitialInputParams","useMemo","id","useSelector","widgetSettings","dispatch","useDispatch","useEffect","historicalDates","mangrove_datum","historicalTimeDiff","dayjs","diff","historicalDatapoints","date","initial_area_m2","area_m2","current_area_m2","loss_ha","agb_tco2e","bgb_tco2e","toc_tco2e","soc_tco2e","parseLocationData","setInputParams","userHasModifiedParams","resetInputParams","addSeries","removeSeries","Map","setSelectedLocationData","mapRef","useRef","countryLocations","setData","dataProcessed","setDataProcessed","time","locationSeriesInputs","emissionModelResults","emissionModelResultFinal","timeEnd","useLocationsData","loadingState","latitude","longitude","zoom","minZoom","viewport","setViewport","tooltip","setTooltip","mapFeatures","setMapFeatures","setMapColours","fitBounds","useCallback","feature","bbox","minLng","minLat","maxLng","maxLat","WebMercatorViewport","padding","top","bottom","right","left","offset","updatedViewport","transitionDuration","transitionInterpolator","FlyToInterpolator","locations","sortBy","reverse","colourKey","allValues","loc","summary","summarise","maxValue","ceil","quartile","valueStep","colourData","colourValueKey","min","max","features","geometry","bounds","properties","normalisedColourVal","colourStopIndex","clamp","floor","numValueStops","coordinates","y","dataLayer","paint","mapStyle","onViewportChange","mapboxApiAccessToken","onHover","srcEvent","offsetX","offsetY","hoveredFeature","f","layer","onMouseOut","clickedFeature","ref","getCursor","isHovering","isDragging","beforeId","startCase","location_type","iso","renderTooltip","position","EmissionsModelChart","rate","metricSuffix","price","select","yAxis","yAxisSmallValue","mtco2e","formatNumber","round","toLocaleString","formatYear","c","formatTooltipValue","suffix","margin","strokeDasharray","strokeOpacity","vertical","dataKey","axisLine","tickMargin","tickCount","domain","tickFormatter","interval","orientation","formatYAxis","tickLine","labelFormatter","formatTooltipLabel","formatter","activeDot","dot","NumberInput","onChange","unit","calculatedWidth","undefined","maximumFractionDigits","displayType","thousandSeparator","minWidth","onValueChange","floatValue","formattedValue","isAllowed","isValid","InfoPopup","content","setIsOpen","InfoIcon","Abbr","interactive","TableRow","unitTitle","valueFormatter","handleChange","infoPopupContent","infoPopupTitle","ValueCell","ValueCellPlaceholder","EmissionModelDescription","showCarbonPrice","isLoaded","exportCsv","color","abs","textAlign","handleResetSeries","SelectInput","selectedValue","target","EmissionsMetricSelect","EmissionsModelWidget","selectedLocationData","exportCsvResultsFilenamePrefix","setLoadingState","useSingleLocationData","locationDataLoadingState","formatSeriesName","key","result","exec","parseInt","row","rest","mapKeys","Year","WidgetBox","onClose","WidgetWrap","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","reducer","config","persistConfig","storage","persistReducer","createPersistedReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1b983446.chunk.js","sourcesContent":["import React from 'react'\n\nimport styles from './Spinner.module.scss'\n\nconst Spinner = ({ isSmall = false, ...props }) => {\n  const size = isSmall ? 25 : 66\n  return (\n    <svg\n      className={styles.spinner}\n      data-testid=\"spinner\"\n      width={size}\n      height={size}\n      viewBox={`0 0 ${size} ${size}`}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <circle\n        className={isSmall ? styles.pathSmall : styles.path}\n        fill=\"none\"\n        strokeWidth={size / 10}\n        strokeLinecap=\"round\"\n        cx={size / 2}\n        cy={size / 2}\n        r={size / 2 - 3}\n      />\n    </svg>\n  )\n}\nexport default Spinner\n","import chroma from 'chroma-js'\nimport materialColors from 'material-colors/dist/colors.js'\n\n// https://www.materialui.co/colors\nexport const colors = materialColors\n\nexport function getMaterialPalette(baseColor = 'red') {\n  const palette = colors[baseColor]\n  return palette\n}\n\nexport const dataColors = [\n  '#113280',\n  '#ffa600',\n  '#8a2f89',\n  '#ff6247',\n  '#d73171',\n]\n\nexport const getBrewerColours = (scaleName = 'OrRd', num = 5) => {\n  return chroma.scale(scaleName).colors(num)\n}\n\nexport const opacify = (col, alpha) => {\n  return chroma(col).alpha(alpha)\n}\n","import React from 'react'\nimport _ from 'lodash'\n\nimport { opacify } from '../../utils/colorUtils'\nimport './MapLegend.css'\n\nconst MapLegend = ({ mapColours }) => {\n  const {\n    colourKeyName,\n    colourKeyUnit,\n    colourStops,\n    valueStops,\n    opacity,\n  } = mapColours\n\n  return (\n    <div className=\"Map--Overlays--Box MapLegend\">\n      <h4 className=\"MapLegend--Title\">\n        {colourKeyName}\n        <br />\n        <span className=\"MapLegend--Unit\">({colourKeyUnit})</span>\n      </h4>\n      <div className=\"MapLegend--Display\">\n        {colourStops.map((colour, index) => {\n          const value = valueStops?.[index]\n          const nextValue = valueStops?.[index + 1]\n\n          if (!_.isNumber(value) || !_.isNumber(nextValue)) {\n            return null\n          }\n\n          const toFixed = (val) => val.toFixed(0)\n\n          let valueString = `${toFixed(value)} - ${toFixed(nextValue)}`\n          if (index === 0) {\n            valueString = `< ${toFixed(nextValue)}`\n          }\n          if (index === colourStops.length - 1) {\n            valueString = `> ${toFixed(value)}`\n          }\n\n          return (\n            <div\n              className=\"MapLegend--ColourStop\"\n              key={`MapLegend--ColourStop--${index}`}\n            >\n              <div\n                className=\"MapLegend--ColourBox\"\n                style={{\n                  background: opacify(colour, opacity),\n                }}\n              />\n              <div className=\"MapLegend--Value\">{valueString}</div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default MapLegend\n","import React from 'react'\n\nconst IconButton = ({ Icon, onClick, ...props }) => {\n  const handleKeyDown = (e) => {\n    if (e.code === 'Space' || e.code === 'Enter') {\n      onClick(e)\n    }\n  }\n  return (\n    <Icon\n      role=\"button\"\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      aria-pressed=\"false\"\n      {...props}\n    />\n  )\n}\n\nexport default IconButton\n","import React from 'react'\nimport Modal from 'react-modal'\nimport CloseIcon from 'react-feather/dist/icons/x'\n\nimport './Popup.css'\nimport IconButton from './IconButton'\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\nModal.setAppElement(`#root`)\n\nconst Popup = ({ title, modalIsOpen, setModalIsOpen, children }) => {\n  function afterOpenModal() {}\n\n  function closeModal() {\n    setModalIsOpen(false)\n  }\n\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onAfterOpen={afterOpenModal}\n      onRequestClose={closeModal}\n      className=\"Popup--Modal\"\n      overlayClassName=\"Popup--Overlay\"\n    >\n      <div className=\"Popup--Modal--Inner\">\n        {title && <h3 className=\"Popup--Title\">{title}</h3>}\n        <div className=\"Popup--Content\">{children}</div>\n      </div>\n      <IconButton\n        Icon={CloseIcon}\n        className=\"Popup--CloseButton\"\n        onClick={closeModal}\n      />\n    </Modal>\n  )\n}\n\nexport default Popup\n","import React, { Fragment, useState } from 'react'\n\nimport IconButton from '../../common/IconButton'\nimport Popup from '../../common/Popup'\nimport './Menu.css'\n\nconst MenuPopupContent = () => (\n  <div>\n    <h4>\n      Nations measure the amount of carbon stored in their forests and wetlands\n      when calculating their total carbon emissions.\n    </h4>\n    <p>\n      Mangroves have among the highest carbon densities of any tropical forest\n      and are referred to as “blue carbon” ecosystems. Much of this carbon is\n      stored in the soils beneath the trees, a stock of carbon that was\n      historically overlooked in national carbon accounts.\n    </p>\n    <p>\n      This web app is designed to help you explore the contribution of mangrove\n      protection to mitigating emissions. The app will predict forgone\n      opportunities to store carbon, given a rate of deforestation. These\n      predictions tell us how much carbon would be stored in the mangrove\n      forests if deforestation was prevented. They include carbon emitted when\n      mangroves are deforested and missed opportunities to sequester carbon in\n      mangroves that are deforested.\n    </p>\n    <p>\n      Predictions for future emissions cannot be made with perfect certainty.\n      These predictions depend on the accuracy of measurements of mangrove area,\n      carbon storage, carbon sequestration and the rate of deforestation. Errors\n      in these inputs, especially the rate of deforestation, will affect the\n      predictions for emissions. However, the results at the national scale are{' '}\n      <a href=\"https://www.biorxiv.org/content/10.1101/2020.08.27.271189v1\">\n        robust for comparing hotspots of emissions across countries\n      </a>\n      .\n    </p>\n    <p>\n      The app uses models and data from the publications:{' '}\n      <ul>\n        <li>\n          <a href=\"https://doi.org/10.1111/conl.12445\">\n            The undervalued contribution of mangrove protection in Mexico to\n            carbon emission targets\n          </a>\n          <br />\n          {' – '}\n          Adame et al. 2018\n        </li>\n\n        <li>\n          <a href=\"https://www.biorxiv.org/content/10.1101/2020.08.27.271189v1\">\n            Future carbon emissions from global mangrove forest loss\n          </a>\n          <br />\n          {' – '}Adame et al. 2020\n        </li>\n        <li>\n          data from the{' '}\n          <a href=\"https://globalmangrovewatch.org\">Global Mangrove Watch</a>.{' '}\n        </li>\n      </ul>\n      <strong>\n        Please cite these publication if you use output from this app or the\n        associated data.\n      </strong>\n    </p>\n\n    <br />\n\n    <h3>Instructions</h3>\n    <p>\n      Click on any country to view country specific information about carbon and\n      projected emissions. To compare future scenarios, set your{' '}\n      <strong>Forecast Years</strong> and click <strong>+ Add Series</strong>{' '}\n      and change the deforestation rate (you can add more than one series).\n    </p>\n    <p>\n      To place a dollar value on these emissions, click the drop down next to\n      the <strong>Projected Emissions</strong> graph title and switch from{' '}\n      <strong>Mt CO2e</strong> to <strong>Price (USD)</strong>. On the left you\n      will now see that <strong>Carbon Price</strong> has appeared below{' '}\n      <strong>Forecast Years</strong>. Different carbon prices are used around\n      the world. To find out what carbon price might be appropriate for a\n      specific area, visit{' '}\n      <a href=\"https://www.worldbank.org/en/programs/pricing-carbon\">\n        worldbank.org/en/programs/pricing-carbon\n      </a>\n      .\n    </p>\n\n    <br />\n\n    <h3>MIT License</h3>\n    <p>Copyright (c) 2021 The Global Wetlands Project</p>\n    <p>\n      Permission is hereby granted, free of charge, to any person obtaining a\n      copy of this software and associated documentation files (the \"Software\"),\n      to deal in the Software without restriction, including without limitation\n      the rights to use, copy, modify, merge, publish, distribute, sublicense,\n      and/or sell copies of the Software, and to permit persons to whom the\n      Software is furnished to do so, subject to the following conditions:\n    </p>\n    <p>\n      The above copyright notice and this permission notice shall be included in\n      all copies or substantial portions of the Software.\n    </p>\n    <p>\n      THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n      THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n      DEALINGS IN THE SOFTWARE.\n    </p>\n    <br />\n  </div>\n)\n\nconst MenuIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"11.5\"></circle>\n      <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\n      <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n    </svg>\n  )\n}\n\nconst Menu = () => {\n  const [menuIsOpen, setMenuIsOpen] = useState(false)\n\n  const menuPopupTitle = 'Mangrove Carbon App'\n\n  const openMenu = () => {\n    setMenuIsOpen(true)\n  }\n\n  return (\n    <Fragment>\n      <IconButton\n        Icon={MenuIcon}\n        onClick={openMenu}\n        className=\"Menu--MenuButton\"\n        title=\"Open Menu\"\n        tabIndex={1}\n      />\n      <Popup\n        title={menuPopupTitle}\n        modalIsOpen={menuIsOpen}\n        setModalIsOpen={setMenuIsOpen}\n      >\n        <MenuPopupContent />\n      </Popup>\n    </Fragment>\n  )\n}\n\nexport default Menu\n","export function m2ToHa(m2) {\n  return m2 * 0.0001\n}\n\nexport function tToMt(t) {\n  return t / 1000000\n}\n\nexport function normalise(val, max, min) {\n  return (val - min) / (max - min)\n}\n\nexport async function delay(ms = 1000) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve()\n    }, ms)\n  })\n}\n","/*\nOpportunity to store carbon \nfor r == d\nwhere t is the time period\n  A1 is initial area\n  d is deforestation rate\n    gross loss not net loss\n  r is emission rate\n    0.1 fixed rate\n  Cmax is maximum emissions\n    ag carbon + bg carbon\n    check units are the same, sometimes C, sometimes CO2, C02 is 2.67 times heavier\n  s is sequestration rate \n    MG per hectare per year\n*/\n\nfunction emission_model_rd({ t, A1, d, r, Cmax, s }) {\n  let x =\n    (A1 * s * (1 - Math.exp(-d * t))) / d -\n    A1 * Cmax * (1 - Math.exp(-d * t) - d * t * Math.exp(-d * t)) -\n    A1 * s * t\n  // because we want positive values\n  x = x * -1\n  return x\n}\n\nfunction emission_model_rnotd({ t, A1, d, r, Cmax, s }) {\n  let x =\n    (A1 * s * (1 - Math.exp(-d * t))) / d - // sequestration with deforesting\n    (A1 * Cmax * (d * Math.exp(-r * t) - r * Math.exp(-d * t) + (r - d))) /\n      (r - d) -\n    // emission from deforesting\n    A1 * s * t // sequestration no deforestation\n  x = x * -1\n  return x\n}\n\nexport function emission_model({\n  t, // the prediction time period\n  A1, // initial area\n  d, // deforestation rate\n  r = 0.1, // emissions rate\n  Cmax, // ag carbon + bg carbon per hectare\n  s = 0, // sequestration rate // is the yearly sequestration rate per hectare\n}) {\n  const args = {\n    t,\n    A1,\n    d,\n    r,\n    Cmax,\n    s,\n  }\n\n  if (d < 0) {\n    return 0\n  }\n\n  if (r === d) {\n    return emission_model_rd(args)\n  } else {\n    return emission_model_rnotd(args)\n  }\n}\n","import _ from 'lodash'\nimport dayjs from 'dayjs'\nimport { parseAsync } from 'json2csv'\nimport { saveAs } from 'file-saver'\n\nimport { m2ToHa } from './utils'\nimport { emission_model } from './emission_model'\n\nexport const loadLocationsData = async ({\n  type = 'country', // country, aoi, wdpa\n}) => {\n  const dataUrl = `${process.env.PUBLIC_URL}/geojson/${type}_locations.json`\n  console.log('Loading locations data', dataUrl)\n  // await delay(1000)\n  const data = await fetch(dataUrl).then((res) => res.json())\n  return data\n}\n\nexport const loadSingleLocationData = async (locationID) => {\n  console.log(`Loading location ${locationID} data`)\n  const dataUrl = `${process.env.PUBLIC_URL}/locations_data/${locationID}.json`\n  const data = fetch(dataUrl).then((res) => res.json())\n  // await delay(1000)\n  return data\n}\n\nexport function parseLocationData({\n  locationData,\n  historicalDates = ['1996-01-01', '2016-01-01'],\n}) {\n  // Mg (Megagram) == Tonne\n  const { mangrove_datum } = locationData\n\n  // get data for each historical date\n  const historicalTimeDiff = dayjs(historicalDates[1]).diff(\n    dayjs(historicalDates[0]),\n    'year'\n  )\n  const historicalDatapoints = [\n    mangrove_datum.find(({ date }) => date === historicalDates[0]),\n    mangrove_datum.find(({ date }) => date === historicalDates[1]),\n  ]\n\n  // Area\n  const { area_m2: initial_area_m2 } = historicalDatapoints[0]\n  const { area_m2: current_area_m2 } = historicalDatapoints[1]\n  const loss_m2 = initial_area_m2 - current_area_m2\n  const loss_ha = m2ToHa(loss_m2)\n  // const initial_area_ha = m2ToHa(initial_area_m2)\n  const current_area_ha = m2ToHa(current_area_m2)\n\n  // get current stored carbon\n  const {\n    agb_tco2e, // above ground total CO2e tonnes\n    bgb_tco2e, // below ground total CO2e tonnes\n    toc_tco2e, // tonnes CO2e total\n    soc_tco2e,\n  } = historicalDatapoints[1]\n\n  // Calculate deforestation rate\n\n  // deforestation rate LOG\n  // (log(area[1] / area[0]) / timeDiff) * -1\n  const deforestationRate =\n    (Math.log(current_area_m2 / initial_area_m2) / historicalTimeDiff) * -1\n  // const deforestationRatePercent = (Math.exp(deforestationRate) - 1) * 100\n\n  // const defRate = Math.log1p(deforestationRatePercent / 100)\n\n  // Carbon storage\n  // tonnes CO2e per hectare\n  // C02 is 3.67 times heavier than C\n  const carbonStoredPerHectare = toc_tco2e / current_area_ha\n\n  // Calculate remaining parameters\n  const emissionsFactor = 0.8\n  // sequestrationRate: varies, no global value, using 6.49 found in table S4 supp materials\n  // sequestrationRate unit: tonnes CO2e per year\n  const sequestrationRate = 6.49\n\n  return {\n    historicalTimeDiff,\n    current_area_ha,\n    loss_ha,\n    deforestationRate,\n    // deforestationRatePercent,\n    emissionsFactor,\n    sequestrationRate,\n    agb_tco2e, // above ground total CO2e grams\n    bgb_tco2e, // below ground total CO2e grams\n    toc_tco2e, // total C02e\n    soc_tco2e,\n    carbonStoredPerHectare,\n  }\n}\n\nexport function calculateEmissionData({\n  current_area_ha,\n  deforestationRate,\n  carbonStoredPerHectare,\n  emissionsFactor = 0.8,\n  // sequestrationRate: varies, no global value, using 6.49 found in table S4 supp materials\n  // sequestrationRate unit: tonnes CO2e per year\n  sequestrationRate = 6.49,\n  forecastYears = 50,\n}) {\n  // generate emission_model data for range of years\n  const maxDataPoints = 100\n  const step = forecastYears > maxDataPoints ? forecastYears / maxDataPoints : 1\n  const years = _.range(1, forecastYears + 1, step)\n\n  const Cmax = emissionsFactor * carbonStoredPerHectare\n\n  // output unit: tonnes CO2 emitted\n  const results = years.map((year) =>\n    emission_model({\n      t: year,\n      A1: current_area_ha, // ha\n      d: deforestationRate,\n      Cmax,\n      s: sequestrationRate,\n    })\n  )\n\n  return results\n}\n\nexport function emissionModelSeriesReducer({\n  seriesResults,\n  forecastStartingYear,\n  conversionRate = 1,\n}) {\n  const reducer = (acc, results, seriesIndex) => {\n    const parsedResults = results.map((value, yearIndex) => ({\n      name: yearIndex + forecastStartingYear, // year\n      [`series_${seriesIndex}`]: value * conversionRate,\n    }))\n\n    acc = parsedResults.map((results) => {\n      let match = acc.find(({ name }) => name === results.name) || {}\n      match = { ...match, ...results }\n      return match\n    })\n\n    return acc\n  }\n  return seriesResults.reduce(reducer, [])\n}\n\nexport async function exportCsv({\n  data,\n  filename = `${new Date()}.csv`,\n  options = {},\n}) {\n  const csv = await parseAsync(data, options)\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8' })\n  saveAs(blob, filename)\n}\n","import _ from 'lodash'\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  forecastYears: 50,\n  emissionsChartYAxis: 'mtco2e',\n  carbonPrice: 5,\n  seriesInputs: {\n    // [countryId]: [...array of series objects, each containing inputParams]\n  },\n}\n\nconst widgetSettingsSlice = createSlice({\n  name: 'widgetSettings',\n  initialState,\n  reducers: {\n    setForecastYears: (state, action) => {\n      const value = action.payload\n      state.forecastYears = value\n    },\n    resetForecastYears: (state) => {\n      state.forecastYears = initialState.forecastYears\n    },\n    setEmissionsChartYAxis: (state, action) => {\n      const options = ['mtco2e', 'price']\n      const value = action.payload\n      if (options.includes(value)) {\n        state.emissionsChartYAxis = value\n      }\n    },\n    setCarbonPrice: (state, action) => {\n      const value = action.payload\n      const isValid = _.inRange(value, 0, 999)\n      if (isValid) {\n        state.carbonPrice = value\n      }\n    },\n    createLocationSeriesInputs: (state, action) => {\n      const { locationID, inputParams } = action.payload\n\n      if (!locationID || !inputParams) {\n        return state\n      }\n\n      //  add series at index 0 if it doesn't exist\n      if (!state.seriesInputs?.[locationID]?.[0]) {\n        let seriesInputs = _.cloneDeep(state.seriesInputs)\n        _.set(seriesInputs, `[${locationID}][0]`, inputParams)\n        state.seriesInputs = seriesInputs\n      }\n    },\n    updateLocationSeriesInputs: (state, action) => {\n      const { locationID, seriesIndex, inputParams } = action.payload\n\n      if (!locationID || !_.isNumber(seriesIndex) || !inputParams) {\n        return state\n      }\n\n      let seriesInputs = _.cloneDeep(state.seriesInputs)\n\n      // Check if existing inputParams\n      const existingInputParams =\n        seriesInputs?.[locationID]?.[seriesIndex] || {}\n\n      // update series inputs\n      _.set(seriesInputs, `[${locationID}][${seriesIndex}]`, {\n        ...existingInputParams,\n        ...inputParams,\n      })\n      state.seriesInputs = seriesInputs\n    },\n    addLocationSeriesInputs: (state, action) => {\n      const { locationID, inputParams } = action.payload\n\n      if (!locationID || !inputParams) {\n        return state\n      }\n\n      state.seriesInputs[locationID].push(inputParams)\n    },\n    removeLocationSeries: (state, action) => {\n      const { seriesIndex, locationID } = action.payload\n      if (seriesIndex === 0) {\n        return false\n      }\n\n      // filter out seriesInputs by provided seriesIndex\n      state.seriesInputs[locationID] = state.seriesInputs[locationID].filter(\n        (item, i) => i !== seriesIndex\n      )\n    },\n  },\n})\n\nexport const {\n  setForecastYears,\n  resetForecastYears,\n  updateLocationSeriesInputs,\n  removeLocationSeries,\n  addLocationSeriesInputs,\n  createLocationSeriesInputs,\n  setEmissionsChartYAxis,\n  setCarbonPrice,\n} = widgetSettingsSlice.actions\n\nexport default widgetSettingsSlice.reducer\n","import { useEffect, useMemo, useState } from 'react'\nimport {\n  loadLocationsData,\n  loadSingleLocationData,\n  calculateEmissionData,\n  parseLocationData,\n} from './dataUtils'\n\nimport {\n  updateLocationSeriesInputs,\n  removeLocationSeries,\n  addLocationSeriesInputs,\n  createLocationSeriesInputs,\n} from '../redux/widgetSettingsSlice'\nimport { useDispatch, useSelector } from 'react-redux'\n\nexport const useLocationsData = ({ type = 'country' } = {}) => {\n  const [data, setData] = useState([])\n  const [dataProcessed, setDataProcessed] = useState([])\n  const forecastYears = useSelector(\n    (state) => state.widgetSettings.forecastYears\n  )\n  const seriesInputs = useSelector((state) => state.widgetSettings.seriesInputs)\n\n  useEffect(() => {\n    loadLocationsData({ type }).then((data) => setData(data))\n  }, [type])\n\n  // Additional data processing\n  useEffect(() => {\n    // Calculate projected emissions for each data point\n    if (data?.length) {\n      console.time('Projected Emissions for all locations')\n\n      const dataProcessed = data.map((locationData) => {\n        const {\n          current_area_ha,\n          deforestationRate,\n          carbonStoredPerHectare,\n        } = locationData\n\n        // Check redux state -> seriesInputs for modified settings per location\n        const locationSeriesInputs = seriesInputs[locationData.id]\n\n        // Use only first in series\n        const inputParams = locationSeriesInputs?.[0] || {}\n        const userHasModifiedParams = inputParams?.userHasModifiedParams\n        // TODO: make these variables configurable\n        const emissionsFactor = 0.8\n        const sequestrationRate = 6.49\n\n        const emissionModelResults = calculateEmissionData({\n          current_area_ha,\n          deforestationRate,\n          emissionsFactor,\n          carbonStoredPerHectare,\n          sequestrationRate,\n          forecastYears,\n          ...inputParams,\n        })\n        const emissionModelResultFinal =\n          emissionModelResults[emissionModelResults.length - 1]\n        return {\n          ...locationData,\n          emissionModelResults,\n          emissionModelResultFinal,\n          userHasModifiedParams,\n        }\n      })\n\n      console.timeEnd('Projected Emissions for all locations')\n\n      setDataProcessed(dataProcessed)\n    }\n  }, [data, forecastYears, seriesInputs])\n\n  return dataProcessed\n}\n\nexport const useSingleLocationData = ({ locationID }) => {\n  const [data, setData] = useState()\n  const [loadingState, setLoadingState] = useState()\n\n  useEffect(() => {\n    if (locationID) {\n      // reset data\n      setData(undefined)\n      setLoadingState('loading')\n\n      loadSingleLocationData(locationID).then((data) => {\n        setData(data)\n        setLoadingState('loaded')\n      })\n    } else {\n      setData(undefined)\n      setLoadingState(undefined)\n    }\n  }, [locationID])\n  return { data, loadingState }\n}\n\nexport const useEmissionModel = ({\n  locationData,\n  forecastYears = 50,\n  forecastStartingYear = 2017,\n}) => {\n  const [initialInputParams, setInitialInputParams] = useState({})\n\n  const locationID = useMemo(() => {\n    return locationData?.id\n  }, [locationData])\n\n  const seriesInputs = useSelector(\n    (state) => state.widgetSettings.seriesInputs?.[locationID]\n  )\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    // update initialInputParams on first load of locationData\n    if (locationData) {\n      const inputParams = parseLocationData({ locationData })\n      setInitialInputParams(inputParams)\n      dispatch(createLocationSeriesInputs({ locationID, inputParams }))\n    } else {\n      setInitialInputParams({})\n    }\n  }, [dispatch, locationData, locationID])\n\n  const resetInputParams = ({ index }) => {\n    // reset params to initialInputParams\n    const inputParams = {\n      ...initialInputParams,\n      userHasModifiedParams: false,\n    }\n    dispatch(\n      updateLocationSeriesInputs({\n        locationID,\n        seriesIndex: index,\n        inputParams,\n      })\n    )\n  }\n\n  const setInputParams = ({ index, inputParams }) => {\n    inputParams = {\n      ...inputParams,\n      userHasModifiedParams: true,\n    }\n    dispatch(\n      updateLocationSeriesInputs({\n        locationID,\n        seriesIndex: index,\n        inputParams,\n      })\n    )\n  }\n\n  const addSeries = () => {\n    dispatch(\n      addLocationSeriesInputs({\n        locationID,\n        inputParams: initialInputParams,\n      })\n    )\n  }\n\n  const removeSeries = ({ index }) => {\n    dispatch(\n      removeLocationSeries({\n        locationID,\n        seriesIndex: index,\n      })\n    )\n  }\n\n  const seriesResults = useMemo(() => {\n    if (seriesInputs?.length) {\n      const results = seriesInputs.map((inputParams) => {\n        const {\n          current_area_ha,\n          deforestationRate,\n          emissionsFactor,\n          carbonStoredPerHectare,\n          sequestrationRate,\n        } = inputParams\n\n        return calculateEmissionData({\n          current_area_ha,\n          deforestationRate,\n          emissionsFactor,\n          carbonStoredPerHectare,\n          sequestrationRate,\n          forecastYears,\n        })\n      })\n      return results\n    } else {\n      return []\n    }\n  }, [forecastYears, seriesInputs])\n\n  return {\n    seriesResults,\n    seriesInputs,\n    setInputParams,\n    resetInputParams,\n    addSeries,\n    removeSeries,\n    forecastStartingYear,\n  }\n}\n","import React, { useEffect, useState, useCallback, useRef, useMemo } from 'react'\nimport {\n  InteractiveMap as MapGL,\n  NavigationControl,\n  Source,\n  Layer,\n  WebMercatorViewport,\n  FlyToInterpolator,\n} from 'react-map-gl'\nimport _ from 'lodash'\nimport bbox from '@turf/bbox'\nimport summarise from 'summary'\n\nimport Spinner from '../../common/Spinner'\nimport MapLegend from './MapLegend'\nimport Menu from './Menu'\nimport { useLocationsData } from '../../utils/dataHooks'\nimport { getBrewerColours } from '../../utils/colorUtils'\nimport { normalise, tToMt } from '../../utils/utils'\nimport './Map.css'\nimport { useSelector } from 'react-redux'\n\nconst Map = ({ setSelectedLocationData }) => {\n  const mapboxApiAccessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN\n  const mapStyle =\n    'mapbox://styles/ejinks-gu/ckhycntp61ol31am7qum156sk?optimize=true'\n  const mapRef = useRef()\n\n  const countryLocations = useLocationsData({ type: 'country' })\n  // const wdpaLocations = useLocationsData({ type: 'wdpa' })\n  // const aoiLocations = useLocationsData({ type: 'aoi' })\n\n  const forecastYears = useSelector(\n    (state) => state.widgetSettings.forecastYears\n  )\n\n  const loadingState = useMemo(() => {\n    if (!!countryLocations?.length) {\n      return 'loaded'\n    }\n    return 'loading'\n  }, [countryLocations])\n\n  const [viewport, setViewport] = useState({\n    // width: 400,\n    // height: 400,\n    latitude: 20,\n    longitude: 0,\n    zoom: 2,\n    minZoom: 2,\n  })\n\n  const [tooltip, setTooltip] = useState({})\n  const [mapFeatures, setMapFeatures] = useState(null)\n  const [mapColours, setMapColours] = useState({})\n\n  const fitBounds = useCallback(\n    (feature) => {\n      // calculate the bounding box of the feature\n      const [minLng, minLat, maxLng, maxLat] = bbox(feature)\n\n      const { longitude, latitude, zoom } = new WebMercatorViewport(\n        viewport\n      ).fitBounds(\n        [\n          [minLng, minLat],\n          [maxLng, maxLat],\n        ],\n        {\n          padding: { top: 100, bottom: 200, right: 100, left: 100 },\n          offset: [0, 0],\n        }\n      )\n      const updatedViewport = {\n        ...viewport,\n        longitude,\n        latitude,\n        zoom,\n        transitionDuration: 1000,\n        transitionInterpolator: new FlyToInterpolator(),\n        // transitionEasing: d3.easeCubic,\n      }\n      setViewport(updatedViewport)\n    },\n    [viewport]\n  )\n\n  const onHover = (e) => {\n    const {\n      features,\n      srcEvent: { offsetX, offsetY },\n    } = e\n    const hoveredFeature =\n      features && features.find((f) => f.layer.id === 'data')\n\n    setTooltip({\n      hoveredFeature,\n      x: offsetX,\n      y: offsetY,\n    })\n  }\n\n  const onMouseOut = () => {\n    setTooltip({})\n  }\n\n  const onClick = (e) => {\n    const { features } = e\n    const clickedFeature =\n      features && features.find((f) => f.layer.id === 'data')\n    if (clickedFeature) {\n      fitBounds(clickedFeature)\n      setSelectedLocationData(clickedFeature?.properties)\n    }\n  }\n\n  const renderTooltip = () => {\n    const { hoveredFeature, x, y } = tooltip\n\n    if (!hoveredFeature) {\n      return null\n    }\n\n    const type = _.startCase(hoveredFeature.properties.location_type)\n    const name = `${hoveredFeature.properties.name} (${hoveredFeature.properties.iso})`\n    const emissionModelResultFinal = tToMt(\n      hoveredFeature.properties.emissionModelResultFinal\n    ).toFixed(1)\n    const userHasModifiedParams =\n      hoveredFeature.properties.userHasModifiedParams\n\n    return (\n      hoveredFeature && (\n        <div className=\"Map--Tooltip\" style={{ left: x, top: y }}>\n          <div>\n            {type}: <span className=\"Map--Tooltip--Value\">{name}</span>\n          </div>\n          <div>\n            Projected Emissions:{' '}\n            <span className=\"Map--Tooltip--Value\">\n              {emissionModelResultFinal} Mt\n            </span>\n          </div>\n          <div>\n            {!!userHasModifiedParams && (\n              <span>\n                <em>*user modified</em>\n              </span>\n            )}\n          </div>\n        </div>\n      )\n    )\n  }\n\n  useEffect(() => {\n    let locations = [\n      ...countryLocations,\n      //  ...wdpaLocations, ...aoiLocations\n    ]\n    locations = _.sortBy(locations, 'area_m2').reverse()\n\n    const colourKey = 'emissionModelResultFinal'\n    const colourKeyName = `${forecastYears || 0}yr Projected Emissions`\n    const colourKeyUnit = 'Mt CO₂e'\n    const colourValueKey = 'colour_normalised'\n    // const minValue = _.min(locations.map((loc) => loc[colourKey])) || 0\n    const minValue = 0\n    // const maxValue = _.max(locations.map((loc) => tToMt(loc[colourKey]))) || 1\n    const allValues = locations.map((loc) => tToMt(loc[colourKey]))\n    const summary = summarise(allValues)\n    const numValueStops = 5\n    const maxValue = _.ceil(summary.quartile(0.95), -2)\n    const valueStep = maxValue / numValueStops\n    const valueStops = _.range(minValue, maxValue + valueStep, valueStep)\n\n    const colourData = {\n      colourKey,\n      colourValueKey,\n      colourKeyName,\n      colourKeyUnit,\n      min: minValue,\n      max: maxValue,\n      valueStops,\n      colourStops: getBrewerColours('Reds', numValueStops),\n      opacity: 0.5,\n    }\n\n    let features = locations.map((loc) => {\n      const { geometry, bounds, ...properties } = loc\n\n      const value = tToMt(properties[colourKey])\n\n      const normalisedColourVal = normalise(\n        value,\n        colourData.max,\n        colourData.min\n      )\n\n      const colourStopIndex = _.clamp(\n        Math.floor(normalisedColourVal * numValueStops),\n        0,\n        numValueStops - 1\n      )\n      const colour = colourData.colourStops[colourStopIndex]\n\n      return {\n        type: 'Feature',\n        geometry: geometry,\n        properties: {\n          ...properties,\n          // save x/y bounding box coordinates\n          x: bounds?.coordinates[0][0],\n          y: bounds?.coordinates[0][2],\n          colour,\n        },\n      }\n    })\n\n    setMapColours(colourData)\n    setMapFeatures(features)\n  }, [\n    countryLocations,\n    forecastYears,\n    // , wdpaLocations, aoiLocations\n  ])\n\n  const dataLayer = {\n    id: 'data',\n    type: 'fill',\n    paint: {\n      'fill-opacity': mapColours.opacity,\n      'fill-outline-color': 'black',\n      'fill-color': ['get', 'colour'],\n    },\n  }\n\n  const getCursor = (e) => {\n    if (e.isHovering) {\n      return 'pointer'\n    }\n    if (e?.isDragging) {\n      return 'grabbing'\n    }\n    if (tooltip?.hoveredFeature) {\n      return 'crosshair'\n    }\n    return 'grab'\n  }\n\n  return (\n    <div className=\"Map\">\n      <MapGL\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={mapStyle}\n        onViewportChange={setViewport}\n        mapboxApiAccessToken={mapboxApiAccessToken}\n        onHover={onHover}\n        onMouseOut={onMouseOut}\n        onClick={onClick}\n        ref={mapRef}\n        getCursor={getCursor}\n      >\n        <NavigationControl\n          className=\"Map--NavigationControl\"\n          onViewportChange={setViewport}\n        />\n\n        <Source\n          type=\"geojson\"\n          data={{ type: 'FeatureCollection', features: mapFeatures }}\n        >\n          <Layer {...dataLayer} beforeId=\"country-label\" />\n        </Source>\n\n        {renderTooltip()}\n      </MapGL>\n\n      <div className=\"Map--Overlays\">\n        <Menu />\n\n        {loadingState === 'loaded' && <MapLegend mapColours={mapColours} />}\n      </div>\n\n      {loadingState !== 'loaded' && (\n        <Spinner\n          style={{\n            position: 'absolute',\n            top: 'calc(50% - 33px)',\n            left: 'calc(50% - 33px)',\n          }}\n        />\n      )}\n    </div>\n  )\n}\nexport default Map\n","import React, { useMemo } from 'react'\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Label,\n} from 'recharts'\nimport _ from 'lodash'\n\nimport { tToMt } from '../../utils/utils'\nimport { dataColors } from '../../utils/colorUtils'\nimport { emissionModelSeriesReducer } from '../../utils/dataUtils'\nimport { useSelector } from 'react-redux'\n\nconst EmissionsModelChart = ({\n  seriesResults = [],\n  forecastStartingYear,\n  width = 385,\n  height = 225,\n}) => {\n  const emissionsChartYAxis = useSelector(\n    (state) => state.widgetSettings.emissionsChartYAxis\n  )\n  const carbonPrice = useSelector((state) => state.widgetSettings.carbonPrice)\n\n  const conversionRate = useMemo(() => {\n    let rate = 1\n    if (emissionsChartYAxis === 'price') {\n      rate = carbonPrice / 1000\n    }\n    return rate\n  }, [emissionsChartYAxis, carbonPrice])\n\n  const metricSuffix = {\n    price: {\n      select: 'USD',\n      yAxis: 'b',\n      yAxisSmallValue: 'm',\n    },\n    mtco2e: {\n      select: 'Mt CO₂e',\n      yAxis: ' Mt',\n    },\n  }\n\n  const data = emissionModelSeriesReducer({\n    seriesResults,\n    forecastStartingYear,\n    conversionRate,\n  })\n\n  const formatNumber = (num) => _.round(tToMt(num), 2).toLocaleString()\n  const formatYAxis = (num) => {\n    if (num < 1000000 && metricSuffix[emissionsChartYAxis].yAxisSmallValue) {\n      // if value less than 0.01b\n      let suffix = metricSuffix[emissionsChartYAxis].yAxisSmallValue\n      return `${formatNumber(num * 1000)}${suffix}`\n    } else {\n      let suffix = metricSuffix[emissionsChartYAxis].yAxis\n      return `${formatNumber(num)}${suffix}`\n    }\n  }\n  const formatYear = (c) => c\n  const formatTooltipLabel = (val) => `${formatYear(val)} emissions`\n  const formatTooltipValue = (val) => {\n    if (val < 1000000 && metricSuffix[emissionsChartYAxis].yAxisSmallValue) {\n      // if value less than 0.01b\n      let suffix = metricSuffix[emissionsChartYAxis].yAxisSmallValue\n      return `${formatNumber(val * 1000)}${suffix}`\n    } else {\n      let suffix = metricSuffix[emissionsChartYAxis].yAxis\n      return `${formatNumber(val)}${suffix}`\n    }\n  }\n\n  return (\n    <LineChart\n      width={width}\n      height={height}\n      data={data}\n      margin={{\n        top: 5,\n        right: 40,\n        left: 0,\n        bottom: 25,\n      }}\n    >\n      <CartesianGrid\n        strokeDasharray=\"5 5\"\n        strokeOpacity={0.5}\n        vertical={false}\n      />\n      <XAxis\n        dataKey=\"name\"\n        // label=\"Years\"\n        axisLine={false}\n        tickMargin={5}\n        tickCount={10}\n        domain={[forecastStartingYear - 1, 'dataMax']}\n        tickFormatter={formatYear}\n        interval=\"preserveStartEnd\"\n        type=\"number\"\n      >\n        <Label value=\"Year\" position=\"bottom\" />\n      </XAxis>\n      <YAxis\n        orientation=\"right\"\n        axisLine={false}\n        tickFormatter={(c) => formatYAxis(c)}\n        type=\"number\"\n        tickLine={false}\n        tickMargin={5}\n      />\n      <Tooltip\n        labelFormatter={(val, name, props) => {\n          return formatTooltipLabel(val)\n        }}\n        formatter={(val, name, props) => {\n          return [formatTooltipValue(val), null]\n        }}\n      />\n      {seriesResults.map((val, seriesIndex) => (\n        <Line\n          key={`series_${seriesIndex}`}\n          dataKey={`series_${seriesIndex}`}\n          type=\"monotone\"\n          stroke={dataColors[seriesIndex]}\n          strokeWidth={2}\n          activeDot={{ r: 8 }}\n          dot={false}\n        />\n      ))}\n    </LineChart>\n  )\n}\n\nexport default EmissionsModelChart\n","import React from 'react'\nimport NumberFormat from 'react-number-format'\nimport _ from 'lodash'\n\nimport './NumberInput.css'\n\nconst NumberInput = ({\n  value,\n  name,\n  onChange = console.log,\n  style = {},\n  unit = '',\n  min,\n  max,\n  ...props\n}) => {\n  const formattedValue = (value || 0).toLocaleString(undefined, {\n    maximumFractionDigits: 20,\n  })\n  const calculatedWidth = formattedValue.length + 0.5 // unit = ch\n  const minWidth = 25\n\n  const isAllowed = ({ floatValue }) => {\n    let isValid = true\n    if (_.isNumber(min)) {\n      isValid = floatValue >= min\n    }\n    if (_.isNumber(max)) {\n      isValid = floatValue <= max\n    }\n    return isValid\n  }\n\n  return (\n    <span>\n      <NumberFormat\n        className=\"NumberInput\"\n        value={value}\n        displayType={'input'}\n        thousandSeparator={true}\n        style={{\n          ...style,\n          width: `${calculatedWidth}ch`,\n          minWidth,\n        }}\n        onValueChange={({ floatValue, formattedValue }) => {\n          onChange({\n            name,\n            value: floatValue,\n          })\n        }}\n        isAllowed={isAllowed}\n        {...props}\n      />{' '}\n      {unit}\n    </span>\n  )\n}\n\nexport default NumberInput\n","import React, { Fragment, useState } from 'react'\nimport Modal from 'react-modal'\nimport InfoIcon from 'react-feather/dist/icons/info'\nimport CloseIcon from 'react-feather/dist/icons/x'\n\nimport './InfoPopup.css'\nimport IconButton from './IconButton'\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\nModal.setAppElement(`#root`)\n\nconst InfoPopup = ({ content, title, className = '' }) => {\n  const [modalIsOpen, setIsOpen] = useState(false)\n\n  function openModal() {\n    setIsOpen(true)\n  }\n\n  function afterOpenModal() {}\n\n  function closeModal() {\n    setIsOpen(false)\n  }\n\n  return (\n    <Fragment>\n      <IconButton\n        Icon={InfoIcon}\n        className={`InfoPopup--InfoIcon ${className}`}\n        onClick={openModal}\n      />\n      <Modal\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        className=\"InfoPopup--Modal\"\n        overlayClassName=\"InfoPopup--Overlay\"\n      >\n        <IconButton\n          Icon={CloseIcon}\n          className=\"InfoPopup--CloseButton\"\n          onClick={closeModal}\n        />\n        {title && <h3 className=\"InfoPopup--Title\">{title}</h3>}\n        <div className=\"InfoPopup--Content\">{content}</div>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default InfoPopup\n","import React from 'react'\nimport Tippy from '@tippyjs/react'\nimport 'tippy.js/dist/tippy.css' // optional\n\nimport './InfoPopup'\nconst Abbr = ({ title, children }) => {\n  return (\n    <Tippy content={title} interactive={true}>\n      <abbr title={title}>{children}</abbr>\n    </Tippy>\n  )\n}\n\nexport default Abbr\n","import React from 'react'\nimport _ from 'lodash'\nimport { useDispatch } from 'react-redux'\nimport ResetIcon from 'react-feather/dist/icons/refresh-cw'\nimport RemoveIcon from 'react-feather/dist/icons/x'\nimport FileIcon from 'react-feather/dist/icons/file-text'\n\nimport NumberInput from './NumberInput'\nimport { dataColors } from '../../utils/colorUtils'\nimport InfoPopup from '../../common/InfoPopup'\nimport Abbr from '../../common/Abbr'\nimport { resetForecastYears } from '../../redux/widgetSettingsSlice'\nimport './EmissionsModelDescription.css'\n\nconst TableRow = ({\n  title,\n  unit,\n  unitTitle,\n  name,\n  seriesInputs = [],\n  valueFormatter = (val) => val,\n  handleChange,\n  min,\n  max,\n  infoPopupContent,\n  infoPopupTitle,\n}) => {\n  return (\n    <tr className=\"EmissionsModelWidget--Table--Row\">\n      <th className=\"EmissionsModelWidget--Table--Row--Header\">\n        <span className=\"EmissionsModelWidget--Table--Row--Header--Name\">\n          {title}\n        </span>\n        {!!unit && (\n          <span className=\"EmissionsModelWidget--Table--Row--Header--Unit\">\n            {' '}\n            (<Abbr title={unitTitle}>{unit}</Abbr>)\n          </span>\n        )}\n        {infoPopupContent && (\n          <InfoPopup content={infoPopupContent} title={infoPopupTitle} />\n        )}\n      </th>\n      {!seriesInputs.length && <ValueCellPlaceholder />}\n      {seriesInputs.map((inputParams, index) => (\n        <ValueCell\n          key={`${name}-${index}`}\n          name={name}\n          value={valueFormatter(inputParams[name])}\n          index={index}\n          handleChange={handleChange}\n          min={min}\n          max={max}\n        />\n      ))}\n    </tr>\n  )\n}\n\nconst ValueCell = ({ name, value, index, handleChange, min, max }) => {\n  return (\n    <td className=\"EmissionsModelWidget--Table--Row--ValueCell\">\n      <NumberInput\n        name={name}\n        value={value}\n        onChange={({ name, value }) => handleChange({ name, value, index })}\n        min={min}\n        max={max}\n      />\n    </td>\n  )\n}\nconst ValueCellPlaceholder = () => (\n  <td className=\"EmissionsModelWidget--Table--Row--ValueCell\">\n    <span className=\"EmissionsModelWidget--Table--Row--ValueCellPlaceholder\">\n      {' '}\n    </span>\n  </td>\n)\n\nconst EmissionModelDescription = ({\n  seriesInputs = {},\n  setInputParams,\n  resetInputParams,\n  addSeries,\n  removeSeries,\n  forecastYears,\n  setForecastYears,\n  carbonPrice,\n  setCarbonPrice,\n  showCarbonPrice,\n  isLoaded,\n  exportCsv,\n}) => {\n  const dispatch = useDispatch()\n  const handleChange = ({ name, value, index }) => {\n    if (name === 'deforestationRate') {\n      value /= 100\n    }\n    setInputParams({ index, inputParams: { [name]: value } })\n  }\n  const handleResetSeries = ({ index }) => {\n    resetInputParams({ index })\n    if (index === 0) {\n      dispatch(resetForecastYears())\n    }\n  }\n  return (\n    <div className=\"Widgets--Description\">\n      <table className=\"EmissionsModelWidget--Table\">\n        <thead>\n          <tr>\n            <th></th>\n            {seriesInputs.length > 1 &&\n              seriesInputs.map((val, index) => (\n                <th\n                  className=\"EmissionsModelWidget--Table--SeriesHeader\"\n                  key={`thead-${index}`}\n                  style={{\n                    color: dataColors[index],\n                  }}\n                >\n                  Series {index + 1}\n                </th>\n              ))}\n          </tr>\n        </thead>\n        <tbody>\n          <TableRow\n            title=\"Mangrove extent\"\n            unit=\"ha\"\n            unitTitle=\"Hectares\"\n            name=\"current_area_ha\"\n            seriesInputs={seriesInputs}\n            handleChange={handleChange}\n            valueFormatter={(val) => _.round(val)}\n            infoPopupTitle=\"Mangrove extent\"\n            infoPopupContent=\"Area covered by mangroves measured in hectares.\"\n          />\n          <TableRow\n            title=\"Deforestation rate\"\n            unit=\"p.a.\"\n            unitTitle=\"Per annum\"\n            name=\"deforestationRate\"\n            seriesInputs={seriesInputs}\n            handleChange={handleChange}\n            valueFormatter={(val) => _.round(val * 100, 3)}\n            infoPopupTitle=\"Deforestation rate\"\n            infoPopupContent=\"Rate at which mangroves are cleared per annum measured in %\"\n          />\n          <TableRow\n            title=\"Sequestration rate\"\n            unit=\"t CO₂e p.a.\"\n            unitTitle=\"Metric Tonnes of CO₂ equivalent per annum\"\n            name=\"sequestrationRate\"\n            seriesInputs={seriesInputs}\n            handleChange={handleChange}\n            infoPopupTitle=\"Sequestration rate\"\n            infoPopupContent=\"Rate at which carbon is sequestered per annum measured in metric tonnes of CO₂e per annum.\"\n          />\n          <TableRow\n            title=\"Carbon stored\"\n            unit=\"t CO₂e / ha\"\n            unitTitle=\"Metric Tonnes of CO₂ equivalent per hectare\"\n            name=\"carbonStoredPerHectare\"\n            seriesInputs={seriesInputs}\n            handleChange={handleChange}\n            valueFormatter={(val) => _.round(val, 2)}\n            infoPopupTitle=\"Carbon stored\"\n            infoPopupContent=\"The amount of carbon stored per hectare of mangroves measured in metric tonnes of CO₂e per hectare.\"\n          />\n          {/* <TableRow\n            title=\"Emissions factor\"\n            name=\"emissionsFactor\"\n            seriesInputs={seriesInputs}\n            handleChange={handleChange}\n          /> */}\n          <TableRow\n            title=\"Forecast Years\"\n            name=\"forecastYears\"\n            seriesInputs={[{ forecastYears }]}\n            handleChange={({ name, value }) => setForecastYears(value)}\n            valueFormatter={(val) => Math.abs(val)}\n            infoPopupTitle=\"Forecast Years\"\n            infoPopupContent=\"The number of years you would like to see projections for.\"\n          />\n          {showCarbonPrice && (\n            <TableRow\n              title=\"Carbon Price\"\n              name=\"carbonPrice\"\n              unit=\"USD / t\"\n              unitTitle=\"US Dollars per metric tonne of CO₂ equivalent\"\n              seriesInputs={[{ carbonPrice }]}\n              handleChange={({ name, value }) => setCarbonPrice(value)}\n              valueFormatter={(val) => Math.abs(val)}\n              min={0}\n              max={999}\n              infoPopupTitle=\"Carbon Price\"\n              infoPopupContent=\"The cost per tonne of carbon in USD.\"\n            />\n          )}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td\n              className=\"EmissionsModelWidget--Table--FooterCell\"\n              style={{ textAlign: 'left' }}\n            >\n              {isLoaded && (\n                <button\n                  className=\"button EmissionsModelWidget--Table--FooterButton\"\n                  onClick={() => addSeries()}\n                >\n                  + Add Series\n                </button>\n              )}\n              {isLoaded && (\n                <button\n                  className=\"button EmissionsModelWidget--Table--FooterButton\"\n                  onClick={exportCsv}\n                >\n                  <FileIcon /> Export CSV\n                </button>\n              )}\n            </td>\n            {seriesInputs.map((inputParams, index) => {\n              return (\n                <td\n                  className=\"EmissionsModelWidget--Table--FooterCell\"\n                  key={`tfoot-${index}`}\n                >\n                  <button\n                    className=\"button EmissionsModelWidget--Table--FooterButton\"\n                    onClick={() => handleResetSeries({ index })}\n                    title=\"Reset\"\n                  >\n                    <ResetIcon />\n                  </button>\n                  {!!index > 0 && (\n                    <button\n                      className=\"button EmissionsModelWidget--Table--FooterButton\"\n                      onClick={() => removeSeries({ index })}\n                      title=\"Remove\"\n                    >\n                      <RemoveIcon />\n                    </button>\n                  )}\n                </td>\n              )\n            })}\n          </tr>\n        </tfoot>\n      </table>\n    </div>\n  )\n}\n\nexport default EmissionModelDescription\n","import React from 'react'\nimport ChevronDown from 'react-feather/dist/icons/chevron-down'\n\nimport './SelectInput.css'\n\nconst SelectInput = ({\n  options = [],\n  className = '',\n  onChange,\n  selectedValue,\n  ...props\n}) => {\n  const handleChange = (e) => {\n    onChange(e.target.value)\n  }\n  return (\n    <span className={`SelectInput--Wrap ${className}`} {...props}>\n      <select\n        className=\"SelectInput--Input\"\n        onChange={handleChange}\n        value={selectedValue}\n      >\n        {options.map(({ name, value }) => (\n          <option value={value} key={`Select${value}`}>\n            {name}\n          </option>\n        ))}\n      </select>\n      <ChevronDown className=\"SelectInput--Icon\" />\n    </span>\n  )\n}\n\nexport default SelectInput\n","import React from 'react'\nimport _ from 'lodash'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useSingleLocationData, useEmissionModel } from '../../utils/dataHooks'\n\nimport Spinner from '../../common/Spinner'\nimport EmissionsModelChart from './EmissionsModelChart'\nimport EmissionsModelDescription from './EmissionsModelDescription'\nimport SelectInput from './SelectInput'\nimport InfoPopup from '../../common/InfoPopup'\nimport { emissionModelSeriesReducer, exportCsv } from '../../utils/dataUtils'\nimport {\n  setCarbonPrice,\n  setEmissionsChartYAxis,\n  setForecastYears,\n} from '../../redux/widgetSettingsSlice'\n\nconst EmissionsModelWidget = ({\n  selectedLocationData,\n  exportCsvResultsFilenamePrefix = 'MangroveCarbon_forecast_',\n}) => {\n  const {\n    data: locationData,\n    loadingState: locationDataLoadingState,\n  } = useSingleLocationData({\n    locationID: selectedLocationData?.id,\n  })\n\n  const dispatch = useDispatch()\n\n  const forecastYears = useSelector(\n    (state) => state.widgetSettings.forecastYears\n  )\n  const emissionsChartYAxis = useSelector(\n    (state) => state.widgetSettings.emissionsChartYAxis\n  )\n  const carbonPrice = useSelector((state) => state.widgetSettings.carbonPrice)\n\n  const {\n    seriesResults,\n    seriesInputs = [],\n    setInputParams,\n    resetInputParams,\n    addSeries,\n    removeSeries,\n    forecastStartingYear,\n  } = useEmissionModel({ locationData, forecastYears })\n\n  const exportEmissionResultsCsv = () => {\n    const data = emissionModelSeriesReducer({\n      seriesResults,\n      forecastStartingYear,\n    })\n\n    const formatSeriesName = (value, key) => {\n      const re = /series_(\\d+)/g\n      const result = re.exec(key)\n      let index = parseInt(result[1])\n      return `Series ${index + 1} (t CO2e)`\n    }\n\n    const mapData = (row) => {\n      const { name, ...rest } = row\n\n      // Change series_0 -> series_1\n      const seriesResults = _.mapKeys(rest, formatSeriesName)\n      const updatedRow = { Year: name, ...seriesResults }\n      return updatedRow\n    }\n\n    const dataMapped = data.map(mapData)\n    const filename = `${exportCsvResultsFilenamePrefix}${new Date()}.csv`\n    exportCsv({ data: dataMapped, filename })\n  }\n\n  return (\n    <div className=\"Widgets--Box--Inner\">\n      {locationDataLoadingState !== 'loaded' && (\n        <Spinner isSmall style={{ position: 'absolute', left: 10, top: 10 }} />\n      )}\n\n      <div className=\"Widgets--Box--Column\">\n        <h3 className=\"Widgets--Title\">\n          {selectedLocationData?.name} ({selectedLocationData?.iso})\n        </h3>\n\n        <EmissionsModelDescription\n          seriesInputs={seriesInputs}\n          setInputParams={setInputParams}\n          resetInputParams={resetInputParams}\n          addSeries={addSeries}\n          removeSeries={removeSeries}\n          forecastYears={forecastYears}\n          setForecastYears={(val) => dispatch(setForecastYears(val))}\n          carbonPrice={carbonPrice}\n          showCarbonPrice={emissionsChartYAxis === 'price'}\n          setCarbonPrice={(val) => dispatch(setCarbonPrice(val))}\n          isLoaded={locationDataLoadingState === 'loaded'}\n          exportCsv={exportEmissionResultsCsv}\n        />\n      </div>\n\n      <div className=\"Widgets--Box--Column\">\n        <h3 className=\"Widgets--Box--Column--Title\">\n          <strong>\n            Projected Emissions{' '}\n            <InfoPopup\n              title={'Projected Emissions'}\n              content={\n                emissionsChartYAxis === 'price'\n                  ? 'Estimated projected emissions per annum measured in USD'\n                  : 'Estimated projected emissions per annum measured in megatonnes of CO₂e'\n              }\n            />\n          </strong>\n          <EmissionsMetricSelect />\n        </h3>\n        <EmissionsModelChart\n          seriesInputs={seriesInputs}\n          seriesResults={seriesResults}\n          forecastStartingYear={forecastStartingYear}\n          width={385}\n          height={250}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst EmissionsMetricSelect = () => {\n  const dispatch = useDispatch()\n\n  const emissionsChartYAxis = useSelector(\n    (state) => state.widgetSettings.emissionsChartYAxis\n  )\n\n  const handleChange = (val) => {\n    dispatch(setEmissionsChartYAxis(val))\n  }\n  const options = [\n    {\n      name: 'Mt CO₂e',\n      value: 'mtco2e',\n    },\n    {\n      name: 'Price (USD)',\n      value: 'price',\n    },\n  ]\n\n  return (\n    <SelectInput\n      options={options}\n      onChange={handleChange}\n      selectedValue={emissionsChartYAxis}\n    />\n  )\n}\n\nexport default EmissionsModelWidget\n","import React from 'react'\nimport CloseIcon from 'react-feather/dist/icons/x'\nimport IconButton from '../../common/IconButton'\n\nconst WidgetBox = ({ children, onClose, ...props }) => {\n  return (\n    <div className=\"Widgets--Box\" {...props}>\n      <IconButton\n        Icon={CloseIcon}\n        className=\"Widgets--Box--CloseButton\"\n        onClick={onClose}\n      />\n      {children}\n    </div>\n  )\n}\n\nexport default WidgetBox\n","import React from 'react'\n\nimport EmissionsModelWidget from './EmissionsModelWidget'\nimport WidgetBox from './WidgetBox'\n\nimport './Widgets.css'\n\nconst WidgetWrap = ({ selectedLocationData, setSelectedLocationData }) => {\n  if (!selectedLocationData) {\n    return null\n  }\n  return (\n    <div className=\"Widgets--Wrap\">\n      <WidgetBox onClose={() => setSelectedLocationData(null)}>\n        <EmissionsModelWidget selectedLocationData={selectedLocationData} />\n      </WidgetBox>\n    </div>\n  )\n}\n\nexport default WidgetWrap\n","import { useState } from 'react'\nimport Map from '../features/map/Map'\nimport Widgets from '../features/widgets/Widgets'\n\nfunction App() {\n  const [selectedLocationData, setSelectedLocationData] = useState()\n\n  return (\n    <div>\n      <Map setSelectedLocationData={setSelectedLocationData} />\n      <Widgets\n        selectedLocationData={selectedLocationData}\n        setSelectedLocationData={setSelectedLocationData}\n      />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit'\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport widgetSettingsSlice from './widgetSettingsSlice'\n\nconst createPersistedReducer = ({ key, reducer, config = {} }) => {\n  const persistConfig = {\n    key,\n    storage,\n    ...config,\n  }\n\n  const persistedReducer = persistReducer(persistConfig, reducer)\n  return persistedReducer\n}\n\nconst rootReducer = combineReducers({\n  widgetSettings: createPersistedReducer({\n    reducer: widgetSettingsSlice,\n    key: 'widgetSettings',\n  }),\n})\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n})\nexport const persistor = persistStore(store)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app/App'\n\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { store, persistor } from './redux/store'\nconst appElementID = 'root'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(appElementID)\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__2xx15\",\"rotator\":\"Spinner_rotator__HruCq\",\"path\":\"Spinner_path__mmN71\",\"dash\":\"Spinner_dash__2c4cX\",\"colors\":\"Spinner_colors__2sF7p\",\"pathSmall\":\"Spinner_pathSmall__1IDXM\",\"dashSmall\":\"Spinner_dashSmall__3h2QR\"};"],"sourceRoot":""}